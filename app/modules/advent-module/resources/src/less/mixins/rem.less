// ===== REM UNIT MIXINS ====
@base-font-size-px: 16; // root's font size. @base-font-size-px MUST BE AN INTEGER.
@rem-fallback: false;
@rem-unit: true;


@pxtorem-js-function: ~`pxtorem = function(px){ if (typeof rmxsBaseFontSize == 'undefined')  rmxsBaseFontSize = @{base-font-size-px}; return (parseInt(px.replace(/(^\d+)(.+$)/i,'$1')) / rmxsBaseFontSize + 'rem') }`;


// ===== FONT MIXINS =====
.font-size(@value) when (@rem-fallback) {
  font-size: @value;
}

.font-size(@value) when (ispixel(@value)) and (@rem-unit) {
  @rem-value: ~`pxtorem('@{value}')`;
  font-size: @rem-value;
}

.line-height(@value) when (@rem-fallback) {
  line-height: @value;
}

.line-height(@value) when (ispixel(@value)) and (@rem-unit) {
  @rem-value: ~`pxtorem('@{value}')`;
  line-height: @rem-value;
}

.text-indent(@value) when (@rem-fallback) {
  text-indent: @value;
}

.text-indent(@value) when (ispixel(@value)) and (@rem-unit) {
  @rem-value: ~`pxtorem('@{value}')`;
  text-indent: @rem-value;
}


// ===== MARGIN MIXINS =====
.margin(@value) when (@rem-fallback) {
  margin: @value;
}

.margin(@vvalue, @hvalue) when (@rem-fallback) {
  margin: @arguments;
}

.margin(@value) when (ispixel(@value)) and (@rem-unit) {
  @rem-value: ~`pxtorem('@{value}')`;
  margin: @rem-value;
}

.margin(@vertical, @horizontal) when (ispixel(@vertical)) and (ispixel(@horizontal)) and (@rem-unit) {
  @rem-vvalue: ~`pxtorem('@{vertical}')`;
  @rem-hvalue: ~`pxtorem('@{horizontal}')`;
  margin: @rem-vvalue @rem-hvalue;
}

.margin(@vertical, @horizontal) when (ispixel(@vertical)) and (@rem-unit) {
  @rem-value: ~`pxtorem('@{vertical}')`;
  .margin(@rem-value, @horizontal);
}

.margin(@vertical, @horizontal) when (ispixel(@horizontal)) and (@rem-unit) {
  @rem-value: ~`pxtorem('@{horizontal}')`;
  .margin(@vertical, @rem-value);
}

.margin-top(@value) when (@rem-fallback) {
  margin-top: @value;
}

.margin-top(@value) when (ispixel(@value)) and (@rem-unit) {
  @rem-value: ~`pxtorem('@{value}')`;
  margin-top: @rem-value;
}

.margin-right(@value) when (@rem-fallback) {
  margin-right: @value;
}

.margin-right(@value) when (ispixel(@value)) and (@rem-unit) {
  @rem-value: ~`pxtorem('@{value}')`;
  margin-right: @rem-value;
}

.margin-bottom(@value) when (@rem-fallback) {
  margin-bottom: @value;
}

.margin-bottom(@value) when (ispixel(@value)) and (@rem-unit) {
  @rem-value: ~`pxtorem('@{value}')`;
  margin-bottom: @rem-value;
}

.margin-left(@value) when (@rem-fallback) {
  margin-left: @value;
}

.margin-left(@value) when (ispixel(@value)) and (@rem-unit) {
  @rem-value: ~`pxtorem('@{value}')`;
  margin-left: @rem-value;
}


// ===== PADDING MIXINS =====
.padding(@value) when (@rem-fallback) {
  padding: @value;
}

.padding(@vvalue, @hvalue) when (@rem-fallback) {
  padding: @arguments;
}

.padding(@value) when (ispixel(@value)) and (@rem-unit) {
  @rem-value: ~`pxtorem('@{value}')`;
  padding: @rem-value;
}

.padding(@vertical, @horizontal) when (ispixel(@vertical)) and (ispixel(@horizontal)) and (@rem-unit) {
  @rem-vvalue: ~`pxtorem('@{vertical}')`;
  @rem-hvalue: ~`pxtorem('@{horizontal}')`;
  padding: @rem-vvalue @rem-hvalue;
}

.padding(@vertical, @horizontal) when (ispixel(@vertical)) and (@rem-unit) {
  @rem-value: ~`pxtorem('@{vertical}')`;
  .padding(@rem-value, @horizontal);
}

.padding(@vertical, @horizontal) when (ispixel(@horizontal)) and (@rem-unit) {
  @rem-value: ~`pxtorem('@{horizontal}')`;
  .padding(@vertical, @rem-value);
}

.padding-top(@value) when (@rem-fallback) {
  padding-top: @value;
}

.padding-top(@value) when (ispixel(@value)) and (@rem-unit) {
  @rem-value: ~`pxtorem('@{value}')`;
  padding-top: @rem-value;
}

.padding-right(@value) when (@rem-fallback) {
  padding-right: @value;
}

.padding-right(@value) when (ispixel(@value)) and (@rem-unit) {
  @rem-value: ~`pxtorem('@{value}')`;
  padding-right: @rem-value;
}

.padding-bottom(@value) when (@rem-fallback) {
  padding-bottom: @value;
}

.padding-bottom(@value) when (ispixel(@value)) and (@rem-unit) {
  @rem-value: ~`pxtorem('@{value}')`;
  padding-bottom: @rem-value;
}

.padding-left(@value) when (@rem-fallback) {
  padding-left: @value;
}

.padding-left(@value) when (ispixel(@value)) and (@rem-unit) {
  @rem-value: ~`pxtorem('@{value}')`;
  padding-left: @rem-value;
}

// ===== BACKGROUND MIXINS =====
.background-size(@value) when (@rem-fallback) {
  background-size: @value;
}
.background-size(@vvalue, @hvalue) when (@rem-fallback) {
  background-size: @arguments;
}

.background-size(@value) when (ispixel(@value)) and (@rem-unit) {
  @rem-value: ~`pxtorem('@{value}')`;
  background-size: @rem-value;
}
.background-size(@vertical, @horizontal) when (ispixel(@vertical)) and (ispixel(@horizontal)) and (@rem-unit) {
  @rem-vvalue: ~`pxtorem('@{vertical}')`;
  @rem-hvalue: ~`pxtorem('@{horizontal}')`;
  background-size: @rem-vvalue @rem-hvalue;
}

.background-size(@vertical, @horizontal) when (ispixel(@vertical)) and (@rem-unit) {
  @rem-value: ~`pxtorem('@{vertical}')`;
  .background-size(@rem-value, @horizontal);
}

.background-size(@vertical, @horizontal) when (ispixel(@horizontal)) and (@rem-unit) {
  @rem-value: ~`pxtorem('@{horizontal}')`;
  .background-size(@vertical, @rem-value);
}



// ===== POSITION MIXINS =====
.height(@value) when (@rem-fallback) {
  height: @value;
}

.height(@value) when (ispixel(@value)) and (@rem-unit) {
  @rem-value: ~`pxtorem('@{value}')`;
  height: @rem-value;
}

.min-height(@value) when (@rem-fallback) {
  min-height: @value;
}

.min-height(@value) when (ispixel(@value)) and (@rem-unit) {
  @rem-value: ~`pxtorem('@{value}')`;
  min-height: @rem-value;
}

.max-height(@value) when (@rem-fallback) {
  max-height: @value;
}

.max-height(@value) when (ispixel(@value)) and (@rem-unit) {
  @rem-value: ~`pxtorem('@{value}')`;
  max-height: @rem-value;
}


.width(@value) when (@rem-fallback) {
  width: @value;
}

.width(@value) when (ispixel(@value)) and (@rem-unit) {
  @rem-value: ~`pxtorem('@{value}')`;
  width: @rem-value;
}

.min-width(@value) when (@rem-fallback) {
  min-width: @value;
}

.min-width(@value) when (ispixel(@value)) and (@rem-unit) {
  @rem-value: ~`pxtorem('@{value}')`;
  min-width: @rem-value;
}

.max-width(@value) when (@rem-fallback) {
  max-width: @value;
}

.max-width(@value) when (ispixel(@value)) and (@rem-unit) {
  @rem-value: ~`pxtorem('@{value}')`;
  max-width: @rem-value;
}

.top(@value) when (@rem-fallback) {
  top: @value;
}

.top(@value) when (ispixel(@value)) and (@rem-unit) {
  @rem-value: ~`pxtorem('@{value}')`;
  top: @rem-value;
}

.left(@value) when (@rem-fallback) {
  left: @value;
}

.left(@value) when (ispixel(@value)) and (@rem-unit) {
  @rem-value: ~`pxtorem('@{value}')`;
  left: @rem-value;
}

.right(@value) when (@rem-fallback) {
  right: @value;
}

.right(@value) when (ispixel(@value)) and (@rem-unit) {
  @rem-value: ~`pxtorem('@{value}')`;
  right: @rem-value;
}

.bottom(@value) when (@rem-fallback) {
  bottom: @value;
}

.bottom(@value) when (ispixel(@value)) and (@rem-unit) {
  @rem-value: ~`pxtorem('@{value}')`;
  bottom: @rem-value;
}
